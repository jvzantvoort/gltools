#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""gl-export-group - export gitlab projects from a gitlab group

Copyright (C) 2019 John van Zantvoort
"""

import argparse
import sys
import os
import os.path as osp
import logging


LOGFILE = osp.join(osp.expanduser('~'), osp.basename(__file__) + ".log")
SCRIPTNAME = osp.dirname(osp.dirname(osp.abspath(__file__)))
sys.path.insert(0, SCRIPTNAME)

from gltools.localgitlab import LocalGitLab
from gltools.config import Config
from gltools.exceptions import GLToolsException
from gltools.main import ExportGroup
from gltools.version import __version__

__author__ = "John van Zantvoort"
__copyright__ = "Proxy B.V."
__email__ = "john.van.zantvoort@proxy.nl"
__license__ = "MIT"

SCRIPTBASE64 = """
IyEvYmluL2Jhc2gKZGVjbGFyZSAtciBTQ1JJUFRQQVRIPSIkKHJlYWRsaW5rIC1mICQwKSIKZGVj
bGFyZSAtciBTQ1JJUFROQU1FPSIkKGJhc2VuYW1lICRTQ1JJUFRQQVRIIC5zaCkiCmRlY2xhcmUg
LXIgU0NSSVBURElSPSIkKGRpcm5hbWUgJFNDUklQVFBBVEgpIgpkZWNsYXJlIC1yIEdST1VQX05B
TUU9IiUoZ3JvdXBfbmFtZSlzIgpkZWNsYXJlIC1yIEdST1VQX1BBVEg9IiUoZ3JvdXBfcGF0aClz
IgpkZWNsYXJlIC1yIFRZUEU9IiUodHlwZSlzIgpkZWNsYXJlIC1yIE5BTUU9IiUobmFtZSlzIgpk
ZWNsYXJlIC1yIFhQQVRIPSIlKHBhdGgpcyIKZGVjbGFyZSAtciBQQVRIX1dJVEhfTkFNRVNQQUNF
PSIlKHBhdGhfd2l0aF9uYW1lc3BhY2UpcyIKZGVjbGFyZSAtciBVUkw9IiUodXJsKXMiCmRlY2xh
cmUgLXIgT1VUUFVURElSPSIlKG91dHB1dGRpcilzLyUoZ3JvdXBfcGF0aClzIgpkZWNsYXJlIC1y
IFRFTVBESVI9IiUodGVtcGRpcilzLyUoZ3JvdXBfcGF0aClzIgpkZWNsYXJlIC1yIE9VVFBVVEZJ
TEU9IiUob3V0cHV0ZGlyKXMvJShncm91cF9wYXRoKXMvJShwYXRoKXMiCgpSRVBPRElSPSQoYmFz
ZW5hbWUgIiR7VVJMfSIgLmdpdCkKCmZ1bmN0aW9uIG1rYnVuZGxlKCkKewogIGxvY2FsIG91dHB1
dGZpbGU9JDE7IHNoaWZ0CiAgZ2l0IGJ1bmRsZSBjcmVhdGUgJHtvdXRwdXRmaWxlfSBtYXN0ZXIK
ICBSRVRWPSQ/CiAgW1sgIiR7UkVUVn0iID0gIjAiIF1dICYmIHJldHVybiAwCiAgZWNobyAiZXhp
dCBjb2RlOiAke1JFVFZ9IgogIGV4aXQgNwp9CgpmdW5jdGlvbiBhcmNoaXZlKCkKewogIGxvY2Fs
IHBhdGg9JDE7IHNoaWZ0CiAgbG9jYWwgdGVtcGRpcj0iJHtURU1QRElSfS9hcmNoaXZlIgogIG1r
ZGlyIC1wICIke3RlbXBkaXJ9IgoKICBnaXQgYXJjaGl2ZSAtLXByZWZpeD0ke3BhdGh9LyBIRUFE
IHwgdGFyIC14ZiAtIC1DICIke3RlbXBkaXJ9IgoKICBpbnN0YWxsX3JvbGVzICIke3RlbXBkaXJ9
LyR7cGF0aH0iCgogIGlmIHJzeW5jIC1hIC0tZGVsZXRlICIke3RlbXBkaXJ9LyR7cGF0aH0vIiAi
JHtPVVRQVVRGSUxFfS8iCiAgdGhlbgogICAgcmV0dXJuIDAKICBlbHNlCiAgICBleGl0IDEwCiAg
ZmkKCn0KCmZ1bmN0aW9uIGluc3RhbGxfcm9sZXMoKQp7CiAgbG9jYWwgYXJjaGRpcj0kMTsgc2hp
ZnQKICBbWyAtZSAiJHthcmNoZGlyfS9yb2xlcy9yZXF1aXJlbWVudHMueW1sIiBdXSB8fCByZXR1
cm4gMAogIGFuc2libGUtZ2FsYXh5IGluc3RhbGwgLXIgIiR7YXJjaGRpcn0vcm9sZXMvcmVxdWly
ZW1lbnRzLnltbCIgLXAgIiR7YXJjaGRpcn0vcm9sZXMiCn0KCgpta2RpciAtcCAiJHtPVVRQVVRE
SVJ9IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgZXhpdCAxCm1rZGly
IC1wICIke1RFTVBESVJ9IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8
fCBleGl0IDIKCnB1c2hkICIke1RFTVBESVJ9IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICB8fCBleGl0IDMKCmVjaG8gIkNsb25pbmcgJHtOQU1FfSIgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBleGl0IDQKZ2l0IGNsb25lICIke1VSTH0i
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGV4aXQgNQoKcHVz
aGQgIiR7UkVQT0RJUn0iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IHx8IGV4aXQgNgoKY2FzZSAkVFlQRSBpbiAKICBidW5kbGUpIG1rYnVuZGxlICIke09VVFBVVEZJ
TEV9LmJ1bmRsZSI7OwogIHBvcnRhYmxlKSBhcmNoaXZlICIke1hQQVRIfSI7OwogICopIGVjaG8g
ImZhaWxlZCB0byBoYW5kbGUgJFRZUEUiOyBleGl0IDggOzsKZXNhYwoKcG9wZApwb3BkCg==
"""


logger = logging.getLogger('gltools')
logger.setLevel(logging.DEBUG)

consolehandler = logging.StreamHandler(sys.stdout)
consolehandler.setFormatter(logging.Formatter("%(levelname)s %(funcName)s:  %(message)s"))
consolehandler.setLevel(logging.DEBUG)
logger.addHandler(consolehandler)

logfilehandler = logging.FileHandler(LOGFILE)
logfilehandler.setFormatter(logging.Formatter("%(levelname)s %(funcName)s: %(message)s"))
logfilehandler.setLevel(logging.DEBUG)
logger.addHandler(logfilehandler)

def parse_args(args):
    """
    Parse command line parameters

    :param args: command line parameters as list of strings
    :return: command line parameters as :obj:`argparse.Namespace`
    """
    retv = dict()
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--version',
        action='version',
        version='export-this {ver}'.format(ver=__version__))

    parser.add_argument(
            '-g', '--gitlab',
            dest="GITLAB",
            help="Which configuration section should be used"
            )

    parser.add_argument(
            '-o', '--outputdir',
            dest="OUTPUTDIR",
            default=os.path.expanduser('~/exports'),
            help="There the export shut be put"
            )

    parser.add_argument(
            '-l', '--list',
            action="store_true",
            dest="SWLIST",
            help="List groups")

    parser.add_argument(
            '-b', '--bundles',
            action="store_true",
            dest="BUNDLES",
            help="Export to bundles")


    parser.add_argument(
            '-e', '--extended',
            action="store_true",
            dest="EXTENDED",
            help="Extended project listing (include roles)")

    parser.add_argument(
            '--http',
            action="store_true",
            dest="HTTP",
            help="Use http urls i.s.o. ssh in project listing")

    parser.add_argument(
            '--groupname',
            dest="GROUPNAME",
            help="Set groupname")

    opts = vars(parser.parse_args(args))

    for keyn, keyv in opts.items():
        if keyv is not None:
            retv[keyn] = keyv

    return retv


def main(args):
    args = parse_args(args)
    args['logger'] = logger
    args['scriptbase64'] = SCRIPTBASE64
    logger.info("START")

    glt = ExportGroup(**args)
    if not glt.check_gitlab_section():
        sys.exit(1)

    if not glt.check_gitlab_group():
        sys.exit(2)

    glt.main()
    logging.info("END")


if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except GLToolsException as exp:
        print(exp)
        sys.exit(1)
